# Create a Docker image for each microservice in Shanoir
name: Publish Docker images

env:
  DOCKER_REPOSITORY: ghcr.io/${{ github.repository }}
  GIT_REPO_URL: https://github.com/${{ github.repository }}

  IMAGES: >-
    database 
   #datasets import keycloak keycloak-database nginx nifti-conversion
   #preclinical solr studies users

  # production builds
  # - triggered by pushing a tag
  # - builds the current commit
  # - cache is disabled
  # development builds
  # - triggerd by workflow_call events (used by the deploy-qualif.yml workflow)
  # - builds the commit provided in the 'commit' input variable
  # - cache is enabled
  PRODUCTION: ${{ github.event_name == 'push' && '1' || '' }}
on:
  push:
    tags:
      - '*'
#  workflow_dispatch: # TODO: remove
#    inputs:
#      commit:
#        description: 'commit id to be built'
#        required: true
  workflow_call:
    inputs:
      commit:
        description: 'git commit to be built (eg: heads/develop, pull/4456/head, fb45b0a9)'
        type: string
        required: true
    outputs:
      sha:
        description: 'effective git commit id built'
        value: ${{ jobs.check.outputs.sha }}
#TODO: disable on pull-request
  
jobs:
  #TODO: skip in production
  check:
    name: Resolve git commit and check the container registry
    runs-on: ubuntu-latest
    outputs:
      sha:    ${{ steps.resolve.outputs.sha }}
      status: ${{ steps.resolve.outputs.status }}
    permissions:
      packages: read
    steps:
      - name: resolve git commit ${{ inputs.commit }}
        id: resolve
        env:
          COMMIT: ${{ inputs.commit }}
        shell: python
        run: |
          import os, pathlib, requests
          from urllib.parse import quote_plus

          def get(endpoint: str) -> requests.Response:
            return requests.get(f"${{ github.api_url }}{endpoint}", headers={
                "Authorization": f"Bearer ${{ github.token }}",
                "X-GitHub-Api-Version": "2022-11-28",
                })

          def resolve_commit(commit: str) -> str:
            repo = "/repos/${{ github.repository }}"
              
            # match by tag/branch
            for prefix in ("", "tags/", "heads/"):
              rep = get(f"{repo}/git/ref/{quote_plus(prefix + commit)}")
              if rep.ok:
                js = rep.json()
                assert js["object"]["type"] == "commit", "intermediate objects not supported (eg: tag objects)"
                return js["object"]["sha"]

            # match by commit
            if re.fullmatch(f"[0-9a-f]+", commit):
              # match by commit
              rep = get(f"{repo}/commits/{quote_plus(commit)}")
              if rep.ok:
                return rep.json()["sha"]

            if rep.status_code == 404:
              raise ValueError(f"unknown git commit: {commit}")
            rep.raise_for_status()

          def check_docker_images(sha: str) -> str:
            # FIXME: nifti-conversion will not be found
            #  -> should run push_to_registry even if this job fails (is that possible?)
            for image in os.environ["IMAGES"].split():
              rep = get(f"/users/a-ba/packages/container/shanoir-ng%2F{image}/versions")
              if rep.ok:
                for version in rep.json():
                  if sha in version["metadata"]["container"]["tags"]:
                    break
              elif rep.status_code != 404:
                  rep.raise_for_status
              print(f"image shanoir-ng/{image}:{sha} not found in the package repository")
              return ""

          sha = resolve_commit(os.environ["COMMIT"])
          print(f"resolved git commit: {sha}")
          status = check_docker_images(sha)
          if status:
            print("docker images already built")
          pathlib.Path(os.environ["GITHUB_OUTPUT"]).write_text(f"sha={sha}\nstatus={status}\n")

  build_images:
    name: Build docker images
    needs: check
    if: needs.check.outputs.status != 'ok'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write # needed by sigstore/fulcio
    env:
      # tag of the resulting docker image
      # - name of the git tag (production builds)
      # - commit id (develpment builds)
      IMAGE_TAG: ${{ github.event_name == 'push' && github.ref_name || needs.check.outputs.sha }}
    steps:
      # TODO: validate the commit id?
      - name: printenv
        run: printenv | sort



      # TODO: remove
      - name: stop
        run: false

      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          ref: ${{ env.IMAGE_TAG }}

      - name: Set up JDK 17
        #TODO: upgrade to v4 (https://github.com/actions/setup-java/issues/596)
        #uses: actions/setup-java@v4.1.0
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: oracle

      - name: Set up Maven cache
        uses: actions/cache@v4
        if: "${{ ! env.production }}"
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0

      - name: Expose GitHub Runtime (needed for docker buildx cache)
        uses: crazy-max/ghaction-github-runtime@v3.0.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.DOCKER_REPOSITORY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Install the cosign tool (except on PR)
      # https://github.com/sigstore/cosign-installer
#      - name: Install cosign
#        if: github.event_name != 'pull_request'
#        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
#        with:
#          cosign-release: 'v2.1.1'
      
      - name: Maven build
        run: mvn -f ./shanoir-ng-parent/pom.xml install -DskipTests

      # note: ultimately we shoud build the images with the docker/bake-action
      # (but buildx bake is still experimental)
      - name: Build docker images
        shell: python
        run: |
          import json
          import os
          import subprocess
          import sys
          import tempfile

          #IMAGES = ["database"]
          #IMAGES = "database datasets import keycloak keycloak-database nginx nifti-conversion preclinical solr studies users".split()
          IMAGES = os.environ["IMAGES"].split()
          
          env = os.environ
          for image in IMAGES:
            repo = f"{env['DOCKER_REPOSITORY']}/{image}"
            tag  = env['IMAGE_TAG']
            with tempfile.TemporaryDirectory() as tmp:
              sys.stderr.write(f"#\n#   Building {image}:{tag}\n#\n")
              subprocess.check_call(["docker", "buildx", "build",
                *(["--cache-from=type=gha"] if not env['PRODUCTION'] else []),
                "--cache-to=type=gha,mode=max",
                "--tag", f"{ repo }:{ tag }",
                "--label", f"org.opencontainers.image.url={ env['GIT_REPO_URL'] }",
                "--label", f"org.opencontainers.image.source={ env['GIT_REPO_URL'] }",
                "--label", f"org.opencontainers.image.version={ tag }",
                "--label", "org.opencontainers.image.revision=${{ github.sha }}",
                # FIXME: should not push the images immediately
                "--push",
                "--metadata-file", f"{tmp}/mdf",
                f"docker-compose/{image}"])
              digest = json.load(open(f"{tmp}/mdf"))["containerimage.digest"]

#              if env['GITHUB_EVENT_NAME'] != "pull_request":
#                sys.stderr.write(f"#\n#   Signing {image}:{tag}\n#\n")
#                subprocess.check_call(["cosign", "sign", "--yes", "--tlog-upload=false", f"{repo}:{tag}@{digest}"])
            

