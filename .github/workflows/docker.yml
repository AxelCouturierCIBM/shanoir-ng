# Create a Docker image for each microservice in Shanoir
name: Publish Docker images

env:
  DOCKER_REPOSITORY: ghcr.io/${{ github.repository }}
  GIT_REPO_URL: https://github.com/${{ github.repository }}

  # production builds
  # - triggered by pushing a tag
  # - builds the current commit
  # - cache is disabled
  # development builds
  # - triggered by workflow_call (in the deploy-qualif workflow)
  # - builds the commit provided in the 'sha' input variable
  # - cache is enabled
  PRODUCTION: ${{ github.event_name == 'push' && '1' || '' }}

  # id of the git commit to be built
  SHA: ${{ github.event_name == 'push' && github.sha || inputs.sha }}

  # tag of the resulting docker image
  # - name of the git tag (production builds)
  # - commit id (develpment builds)
  IMAGE_TAG: ${{ github.event_name == 'push' && github.ref_name || inputs.sha }}

  # boolean: force rebuilding the docker images from scratch
  NO_CACHE: ${{ inputs.no_cache && '1' || '' }}

on:
  push:
    tags:
      - '*'
  workflow_call:
    inputs:
      sha:
        description: 'git commit to be built'
        type: string
        required: true
      no_cache:
        description: 'force rebuilding the docker images from scratch'
        type: boolean
        default: false

jobs:
  build_images:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:

      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PRODUCTION && github.repository || 'fli-iam/shanoir-ng' }}
          ref: ${{ env.IMAGE_TAG }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.0
        with:
          java-version: 17
          distribution: oracle

      # maven cache only enabled on development builds
      - name: Set up Maven cache
        uses: actions/cache@v4
        if: "${{ ! env.production }}"
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.DOCKER_REPOSITORY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate the docker bake config
        shell: python
        run: |
          import json, os, pathlib, requests, subprocess
          env = os.environ

          # query the sha of the head of the main branch
          MAIN_BRANCH = "develop"
          main_branch_sha = requests.get(
              f"${{ github.api_url }}/repos/${{ github.repository }}/branches/{MAIN_BRANCH}",
              headers={"Authorization": "Bearer ${{ github.token }}"},
            ).json().get("sha")

          # cache configuration
          #
          # We do not use 'type=gha' because the github actions cache is not
          # able to reliably reuse an existing cache for all images in every
          # build, thus rendering the cache ineffective (this is probably
          # caused by the size limits).
          #
          # Instead we explicitely store the cache in container repository of
          # the project ('type=registry'), under the tag 'cache'
          # - we pull the cache (cache_from) before development builds of any
          #   branch when inputs.no_cache is false
          # - we push the cache (cache_to) after development builds of the
          #   main branch only
          # - we never use the cache on production builds
          enable_cache_from = not env['PRODUCTION'] and not env['NO_CACHE']
          enable_cache_to   = not env['PRODUCTION'] and (
            main_branch_sha == env['IMAGE_TAG'] == env['SHA'])
          print(f"{enable_cache_from = }\n{enable_cache_to = }\n")

          def cache_arg(enabled: bool, image: str, extra=""):
            return [f"type=registry,ref={env['DOCKER_REPOSITORY']}/{image}:cache{extra}"
                   ] if enabled else []
  
          # extract the list of images to be built from the docker-compose config
          images = json.loads(subprocess.check_output(
                  ["docker", "buildx", "bake", "--print", "-f", "docker-compose.yml"])
              )["group"]["default"]["targets"]

          # override the bake config (add cache config + set tags & labels)
          config = json.dumps({
            #"group": { "default": { "targets": ["database"] }}, # TODO: remove
            "target": {
              image: {
                "cache-from": cache_arg(enable_cache_from, image),
                "cache-to":   cache_arg(enable_cache_to,   image, ",mode=max"),
                "tags": [f"{env['DOCKER_REPOSITORY']}/{image}:{env['IMAGE_TAG']}"],
                "labels": {
                  "org.opencontainers.image.url":      env['GIT_REPO_URL'],
                  "org.opencontainers.image.source":   env['GIT_REPO_URL'],
                  "org.opencontainers.image.version":  env['IMAGE_TAG'],
                  "org.opencontainers.image.revision": env['SHA'],
                },
                } for image in images }}, indent=2)
          if "${{ runner.debug }}":
            print(config)
          pathlib.Path("docker-bake.json").write_text(config)

#          cosign-release: 'v2.1.1'

      - name: Maven build
        run: mvn -f ./shanoir-ng-parent/pom.xml install -DskipTests

      - name: Build docker images
        uses: docker/bake-action@v4
        with:
          push: true
#      # note: ultimately we should build the images with the docker/bake-action
#      # (but buildx bake is still experimental)
#      - name: Build docker images
#        shell: python
#        run: |
#          import os, subprocess, sys
#
#          IMAGES = """database datasets import keycloak keycloak-database
#                      nginx nifti-conversion preclinical solr studies users
#                      """.split()
#
#          env = os.environ
#          for image in IMAGES:
#            repo = f"{env['DOCKER_REPOSITORY']}/{image}"
#            sys.stderr.write(f"#\n#   Building {image}:{env['IMAGE_TAG']}\n#\n")
#            subprocess.check_call(["docker", "buildx", "build",
#              *(["--cache-from=type=gha"] if not env['PRODUCTION'] else []),
#              "--cache-to=type=gha,mode=max",
#              "--tag", f"{ repo }:{ env['IMAGE_TAG'] }",
#              "--label", f"org.opencontainers.image.url={ env['GIT_REPO_URL'] }",
#              "--label", f"org.opencontainers.image.source={ env['GIT_REPO_URL'] }",
#              "--label", f"org.opencontainers.image.version={ env['IMAGE_TAG'] }",
#              "--label", f"org.opencontainers.image.revision={ env['SHA'] }",
#              "--push",
#              f"docker-compose/{image}"])
