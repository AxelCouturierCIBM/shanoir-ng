# Create a Docker image for each microservice in Shanoir
name: Publish Docker images

env:
  DOCKER_REPOSITORY: ghcr.io/${{ github.repository }}
  GIT_REPO_URL: https://github.com/${{ github.repository }}
  TAG: ${{ github.ref_name }}
on:
  workflow_dispatch:
  push:
#TODO: disable on pull-request
#  push:
#    tags:
#      - '*'
  
jobs:
  push_to_registry:
    name: Publish docker images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:

#      - name: Set up JDK 17
#        uses: actions/setup-java@v1
#        with:
#          java-version: 17

      - name: Check out the repo
        uses: actions/checkout@v3

##      - name: Create directory /shanoir-ng-logs
##        run: sudo mkdir -m777 /var/log/shanoir-ng-logs
      
#      - name: Maven build
#        run: mvn -f ./shanoir-ng-parent/pom.xml install -DskipTests
##        env:
##          SHANOIR_URL_HOST: localhost
##          SHANOIR_URL_SCHEME: http
##          SHANOIR_PREFIX: github
##          SHANOIR_ADMIN_EMAIL: nobody@inria.fr
##          SHANOIR_KEYCLOAK_USER: admin
##          SHANOIR_KEYCLOAK_PASSWORD: '&a1A&a1A'
 
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        #if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
        with:
          cosign-release: 'v2.1.1'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REPOSITORY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build, push & sign docker images
        if: github.event_name != 'pull_request'
        shell: python
        run: |
          import json
          import os
          import sys
          import subprocess
          import tempfile

          IMAGES = ["database"]
          #IMAGES = "database datasets import keycloak keycloak-database nginx nifti-conversion preclinical solr studies users".split()
          
          env = os.environ
          tag = env['TAG']
          try:
           for image in IMAGES:
            repo = f"{env['DOCKER_REPOSITORY']}/{image}"
            with tempfile.TemporaryDirectory() as tmp:
              sys.stderr.write(f"#\n#   Building {image}:{tag}\n#\n")
              subprocess.call(["date"])
              subprocess.check_call(["docker", "buildx", "build",
                "--cache-from=type=gha",
                "--cache-to=type=gha,mode=max",
                "--tag", f"{ repo }:{ env['TAG'] }",
                "--tag", f"{ repo }:latest",
                "--label", f"org.opencontainers.image.url={ env['GIT_REPO_URL'] }",
                "--label", f"org.opencontainers.image.source={ env['GIT_REPO_URL'] }",
                "--label", f"org.opencontainers.image.version={ tag }",
                "--label", "org.opencontainers.image.revision=${{ github.sha }}",
                # FIXME: should not push the images immediately
                "--push",
                "--metadata-file", f"{tmp}/mdf",
                f"docker-compose/{image}"])
              digest = json.load(open(f"{tmp}/mdf"))["containerimage.digest"]

              sys.stderr.write(f"#\n#   Signing {image}:{tag}\n#\n")
              subprocess.call(["date"])
              subprocess.check_call(["cosign", "sign", "--yes", "--tlog-upload=false", "--oidc-provider=github-actions", f"{repo}:{tag}@{digest}"])
          finally:
              subprocess.call(["date"])
            

