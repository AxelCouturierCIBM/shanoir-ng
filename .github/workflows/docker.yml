# Create a Docker image for each microservice in Shanoir
name: Publish Docker images

env:
  DOCKER_REPOSITORY: ghcr.io/${{ github.repository }}
  GIT_REPO_URL: https://github.com/${{ github.repository }}

  # production builds
  # - triggered by pushing a tag
  # - builds the current commit
  # - cache is disabled
  # development builds
  # - triggerd by workflow_dispatch events
  # - builds the commit provided in the 'commit' input variable
  # - cache is enabled
  PRODUCTION: ${{ github.event_name == 'push' && '1' || '' }}
  # tag of the resulting docker image
  # - name of the git tag (production builds)
  # - commit id (develpment builds)
  IMAGE_TAG: ${{  github.event_name == 'push' && github.ref_name || inputs.commit }}
on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      commit:
        description: 'commit id to be built'
        required: true
#TODO: disable on pull-request
  
jobs:
  push_to_registry:
    name: Publish docker images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write # needed by sigstore/fulcio
    steps:
      # TODO: validate the commit id?
      - name: printenv
        run: printenv | sort

      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          ref: ${{ env.IMAGE_TAG }}

      - name: Set up JDK 17
        #TODO: upgrade to v4 (https://github.com/actions/setup-java/issues/596)
        #uses: actions/setup-java@v4.1.0
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: oracle

      - name: Set up Maven cache
        uses: actions/cache@v4
        if: "${{ ! env.production }}"
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0

      - name: Expose GitHub Runtime (needed for docker buildx cache)
        uses: crazy-max/ghaction-github-runtime@v3.0.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.DOCKER_REPOSITORY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Install the cosign tool (except on PR)
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
        with:
          cosign-release: 'v2.1.1'

##      - name: Create directory /shanoir-ng-logs
##        run: sudo mkdir -m777 /var/log/shanoir-ng-logs
      
      - name: Maven build
        run: mvn -f ./shanoir-ng-parent/pom.xml install -DskipTests

      # note: ultimately we shoud build the images with the docker/bake-action
      # (but buildx bake is still experimental)
      - name: Build, push & sign docker images
        shell: python
        run: |
          import json
          import os
          import subprocess
          import sys
          import tempfile

          IMAGES = ["database"]
          #IMAGES = "database datasets import keycloak keycloak-database nginx nifti-conversion preclinical solr studies users".split()
          
          env = os.environ
          for image in IMAGES:
            repo = f"{env['DOCKER_REPOSITORY']}/{image}"
            tag  = env['IMAGE_TAG']
            with tempfile.TemporaryDirectory() as tmp:
              sys.stderr.write(f"#\n#   Building {image}:{tag}\n#\n")
              subprocess.check_call(["docker", "buildx", "build",
                *(["--cache-from=type=gha"] if not env['PRODUCTION'] else []),
                "--cache-to=type=gha,mode=max",
                "--tag", f"{ repo }:{ tag }",
                "--label", f"org.opencontainers.image.url={ env['GIT_REPO_URL'] }",
                "--label", f"org.opencontainers.image.source={ env['GIT_REPO_URL'] }",
                "--label", f"org.opencontainers.image.version={ tag }",
                "--label", "org.opencontainers.image.revision=${{ github.sha }}",
                # FIXME: should not push the images immediately
                "--push",
                "--metadata-file", f"{tmp}/mdf",
                f"docker-compose/{image}"])
              digest = json.load(open(f"{tmp}/mdf"))["containerimage.digest"]

              if env['GITHUB_EVENT_NAME'] != "pull_request":
                sys.stderr.write(f"#\n#   Signing {image}:{tag}\n#\n")
                subprocess.check_call(["cosign", "sign", "--yes", "--tlog-upload=false", f"{repo}:{tag}@{digest}"])
            

