# Create a Docker image for each microservice in Shanoir
name: Publish Docker images

env:
  DOCKER_REPOSITORY: ghcr.io/${{ github.repository }}
  GIT_REPO_URL: https://github.com/${{ github.repository }}

  # production builds
  # - triggered by pushing a tag
  # - builds the current commit
  # - cache is disabled
  # development builds
  # - triggered by workflow_call (in the deploy-qualif workflow)
  # - builds the commit provided in the 'sha' input variable
  # - cache is enabled
  PRODUCTION: ${{ github.event_name == 'push' && '1' || '' }}

  # id of the git commit to be built
  SHA: ${{ github.event_name == 'push' && github.sha || inputs.sha }}

  # tag of the resulting docker image
  # - name of the git tag (production builds)
  # - commit id (develpment builds)
  IMAGE_TAG: ${{ github.event_name == 'push' && github.ref_name || inputs.sha }}

on:
  push:
    tags:
      - '*'
  workflow_call:
    inputs:
      sha:
        description: 'git commit to be built'
        type: string
        required: true

jobs:
  build_images:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:

      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PRODUCTION && github.repository || 'fli-iam/shanoir-ng' }}
          ref: ${{ env.IMAGE_TAG }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.0
        with:
          java-version: 17
          distribution: oracle

      - name: Set up Maven cache
        uses: actions/cache@v4
        if: "${{ ! env.production }}"
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0

      - name: Expose GitHub Runtime (needed for docker buildx cache)
        uses: crazy-max/ghaction-github-runtime@v3.0.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.DOCKER_REPOSITORY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate docker bake config
        shell: python
        run: |
          import json, os, pathlib, subprocess
          env = os.environ
  
          # extract the list of images to be built from the docker-compose config
          images = json.loads(subprocess.check_output(
                  ["docker", "buildx", "bake", "--print", "-f", "docker-compose.yml"])
              )["group"]["default"]["targets"]
          images = ["database"]

          # generate config
          #  - use github cache (for development builds build only)
          #  - save result to github cache
          #  - set tags & labels
          cache = lambda image: f"type=registry,ref={env['DOCKER_REPOSITORY']}/{image}:cache"
          pathlib.Path("docker-bake.json").write_text(json.dumps({
            "target": {
              image: {
                "cache-from": ([] if env['PRODUCTION'] else [cache(image)]),
                "cache-to":   [f"{cache(image)},mode=max"],
                "tags": [f"{env['DOCKER_REPOSITORY']}/{image}:{env['IMAGE_TAG']}"],
                #"labels": {
                #  "org.opencontainers.image.url":      env['GIT_REPO_URL'],
                #  "org.opencontainers.image.source":   env['GIT_REPO_URL'],
                #  "org.opencontainers.image.version":  env['IMAGE_TAG'],
                #  "org.opencontainers.image.revision": env['SHA'],
                #},
                } for image in images }}))


#          cosign-release: 'v2.1.1'

#      - name: Maven build
#        run: mvn -f ./shanoir-ng-parent/pom.xml install -DskipTests

      - name: Build docker images
        uses: docker/bake-action@v4
        with:
          push: true
          sbom: true
#      # note: ultimately we should build the images with the docker/bake-action
#      # (but buildx bake is still experimental)
#      - name: Build docker images
#        shell: python
#        run: |
#          import os, subprocess, sys
#
#          IMAGES = """database datasets import keycloak keycloak-database
#                      nginx nifti-conversion preclinical solr studies users
#                      """.split()
#
#          env = os.environ
#          for image in IMAGES:
#            repo = f"{env['DOCKER_REPOSITORY']}/{image}"
#            sys.stderr.write(f"#\n#   Building {image}:{env['IMAGE_TAG']}\n#\n")
#            subprocess.check_call(["docker", "buildx", "build",
#              *(["--cache-from=type=gha"] if not env['PRODUCTION'] else []),
#              "--cache-to=type=gha,mode=max",
#              "--tag", f"{ repo }:{ env['IMAGE_TAG'] }",
#              "--label", f"org.opencontainers.image.url={ env['GIT_REPO_URL'] }",
#              "--label", f"org.opencontainers.image.source={ env['GIT_REPO_URL'] }",
#              "--label", f"org.opencontainers.image.version={ env['IMAGE_TAG'] }",
#              "--label", f"org.opencontainers.image.revision={ env['SHA'] }",
#              "--push",
#              f"docker-compose/{image}"])
