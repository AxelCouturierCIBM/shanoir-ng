name: Deploy to qualif
run-name: deploy ${{ inputs.commit }} to [${{ inputs.neurinfo && 'neurinfo' || '' }} ${{ inputs.ofsep && 'ofsep' || ''}} ${{ inputs.poc-neurinfo && 'poc-neurinfo' || ''}}] by ${{ inputs.owner }}

on:
  workflow_dispatch:
    inputs:
      commit:
        description: "commit id to be deployed"
        required: true
      owner:
        description: "person who triggered this workflow"
        required: true
      deploy_id:
        description: "unique id for this deployment"
        required: true
      neurinfo:
        type: boolean
        default: false
      ofsep:
        type: boolean
        default: false
      poc-neurinfo:
        type: boolean
        default: false
      runner:
        description: "target runner for the deployment"
        required: true
        type: choice
        options: [ shanoir-deploy, shanoir-2016, eskemm-poc ] # TODO: cleanup

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      # id of the git commit to be deployed
      sha:           ${{ steps.prepare.outputs.sha }}
      # set to "yes" if the docker images are already built for this commit
      already_built: ${{ steps.prepare.outputs.already_built }}
      # list of the enabled deploy targets 
      targets:       ${{ steps.prepare.outputs.targets }}
    permissions:
      packages: read
    steps:
      - name: prepare deployment (resolve git commit, query registry, identify targets)
        id: prepare 
        env:
          INPUTS: ${{ toJSON(inputs) }}
        shell: python
        run: |
          import json, os, pathlib, re, requests
          from typing import Optional
          from urllib.parse import quote_plus

          def get(endpoint: str) -> Optional[requests.Response]:
            rep = requests.get(f"${{ github.api_url }}{endpoint}", headers={
                "Authorization": f"Bearer ${{ github.token }}",
                "X-GitHub-Api-Version": "2022-11-28",
                })
            if rep.ok:
              return rep.json()
            if rep.status_code == 404:
              return None
            rep.raise_for_status()

          def resolve_commit(commit: str) -> str:
            repo = "/repos/${{ github.repository }}"
            
            # match by tag/branch
            for prefix in ("", "tags/", "heads/"):
              if rep := get(f"{repo}/git/ref/{quote_plus(prefix + commit)}")
                assert rep["object"]["type"] == "commit", "intermediate objects not supported (eg: tag objects)"
                return rep["object"]["sha"]

            # match by commit
            if re.fullmatch(f"[0-9a-f]+", commit):
              # match by commit
              if rep := get(f"{repo}/commits/{quote_plus(commit)}")
                return rep["sha"]

            raise ValueError(f"unknown git commit: {commit}")

          def check_docker_images(sha: str) -> str:
            # FIXME: nifti-conversion will not be found
            #  -> should run push_to_registry even if this job fails (is that possible?)
            for image in ["database"]:
              if rep := get(f"/users/a-ba/packages/container/shanoir-ng%2F{image}/versions"):
                if any(sha in version["metadata"]["container"]["tags"] for version in rep):
                  continue
              print(f"image shanoir-ng/{image}:{sha} not yet built and pushed to the registry")
              return ""
            return "yes"

          inputs = json.loads(os.environ["INPUTS"])
          print("git commit to be deployed: {inputs['commit']}")
          sha = resolve_commit(inputs['commit'])
          print(f"  --> resolved to: {sha}")
          already_built = check_docker_images(sha)
          if already_built:
            print("docker images already built")
          targets = [t for t in ("neurinfo", "ofsep", "poc-neurinfo") if inputs[t]]
          pathlib.Path(os.environ["GITHUB_OUTPUT"]).write_text(
            f"sha={sha}\nalready_built={already_built}\ntargets={json.dumps(targets)}\n")

  build:
    needs: prepare
    if: needs.prepare.outputs.already_built != 'yes'
    uses: ./.github/workflows/docker.yml
    with:
      sha: "${{ needs.prepare.outputs.sha }}"

  post_build:
    runs-on: ${{ inputs.runner }}
    needs: [ prepare, build ]
    if: ${{ always() }}
    env:
      DEPLOY_ID: ${{ inputs.DEPLOY_ID }}
    steps:
      - run: sh /run/github-runner/deploy-shanoir post_build ${{ needs.build.result }}
      - env:
          TARGETS: ${{ needs.prepare.outputs.targets }}
        run: printenv


  deploy:
    needs: [ prepare, build, post_build ]
    runs-on: ${{ inputs.runner }}
    if: ${{ !cancelled() && !failure() }}
    env:
      DEPLOY_ID: ${{ inputs.DEPLOY_ID }}
    strategy:
      matrix:
        #target: [ neurinfo, ofsep ]
        target: ${{ fromJSON(needs.prepare.outputs.targets) }}
    steps:
      - run: sh /run/github-runner/deploy-shanoir ${{ matrix.target }}

#  deploy-neurinfo:
#    if: ${{ inputs.neurinfo }}
#    needs: [ build, post_build ]
#    runs-on: shanoir-deploy
#    env:
#      DEPLOY_ID: ${{ inputs.DEPLOY_ID }}
#    steps:
#      - run: sh /run/github-runner/deploy-shanoir neurinfo
#
#  deploy-ofsep:
#    if: ${{ inputs.ofsep }}
#    needs: [ build, post_build ]
#    runs-on: shanoir-deploy
#    env:
#      DEPLOY_ID: ${{ inputs.DEPLOY_ID }}
#    steps:
#      - run: sh /run/github-runner/deploy-shanoir ofsep
#
#  deploy-poc-neurinfo:
#    if: ${{ inputs.poc-neurinfo }}
#    needs: [ build, post_build ]
#    runs-on: shanoir-deploy
#    env:
#      DEPLOY_ID: ${{ inputs.DEPLOY_ID }}
#    steps:
#      - run: sh /run/github-runner/deploy-shanoir poc-neurinfo
