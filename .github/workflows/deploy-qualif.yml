name: Deploy to qualif
run-name: deploy ${{ inputs.commit }} to ${{ inputs.neurinfo && 'neurinfo' || '-' }},${{ inputs.ofsep && 'ofsep' || '-'}} by ${{ inputs.owner }}

on:
  workflow_dispatch:
    inputs:
      commit:
        description: "commit id to be deployed"
        required: true
      owner:
        description: "person who triggered this workflow"
        required: true
      deploy_id:
        description: "unique id for this deployment"
        required: true
      neurinfo:
        type: boolean
        default: false
      ofsep:
        type: boolean
        default: false
      poc-neurinfo:
        type: boolean
        default: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      sha:     ${{ steps.prepare.outputs.sha }}
      status:  ${{ steps.prepare.outputs.status }}
      targets: ${{ fromJson(steps.prepare.outupts.targets) }}
    permissions:
      packages: read
    steps:
      - name: prepare deployment (resolve git commit, query registry, identify targets)
        id: prepare 
        env:
          COMMIT: ${{ inputs.commit }}
        shell: python
        run: |
          import os, pathlib, re, requests
          from urllib.parse import quote_plus

          def get(endpoint: str) -> requests.Response:
            return requests.get(f"${{ github.api_url }}{endpoint}", headers={
                "Authorization": f"Bearer ${{ github.token }}",
                "X-GitHub-Api-Version": "2022-11-28",
                })

          def resolve_commit(commit: str) -> str:
            repo = "/repos/${{ github.repository }}"
            
            # match by tag/branch
            for prefix in ("", "tags/", "heads/"):
              rep = get(f"{repo}/git/ref/{quote_plus(prefix + commit)}")
              if rep.ok:
                js = rep.json()
                assert js["object"]["type"] == "commit", "intermediate objects not supported (eg: tag objects)"
                return js["object"]["sha"]

            # match by commit
            if re.fullmatch(f"[0-9a-f]+", commit):
              # match by commit
              rep = get(f"{repo}/commits/{quote_plus(commit)}")
              if rep.ok:
                return rep.json()["sha"]

            if rep.status_code == 404:
              raise ValueError(f"unknown git commit: {commit}")
            rep.raise_for_status()

          def check_docker_images(sha: str) -> str:
            # FIXME: nifti-conversion will not be found
            #  -> should run push_to_registry even if this job fails (is that possible?)
            for image in ["database"]:
              rep = get(f"/users/a-ba/packages/container/shanoir-ng%2F{image}/versions")
              if rep.ok:
                if any(sha in version["metadata"]["container"]["tags"] for version in rep.json()):
                  continue
              elif rep.status_code != 404:
                  rep.raise_for_status()
              print(f"image shanoir-ng/{image}:{sha} not yet built and pushed to the registry")
              return ""
            return "ok"

          print("git commit to be deployed: {os.environ['COMMIT']}")
          sha = resolve_commit(os.environ["COMMIT"])
          print(f"  --> resolved to: {sha}")
          status = check_docker_images(sha)
          if status:
            print("docker images already built")
          targets = []
          print("""
            ${{ toJson(inputs) }}
          """)
          pathlib.Path(os.environ["GITHUB_OUTPUT"]).write_text(f"sha={sha}\nstatus={status}\n")
          raise

  build:
    uses: ./.github/workflows/docker.yml
    with:
      commit: "${{ inputs.commit }}"

  post_build:
    runs-on: shanoir-deploy
    needs: build
    if: ${{ always() }}
    env:
      DEPLOY_ID: ${{ inputs.DEPLOY_ID }}
    steps:
      - run: sh /run/github-runner/deploy-shanoir post_build ${{ needs.build.result }}

  deploy-neurinfo:
    if: ${{ inputs.neurinfo }}
    needs: [ build, post_build ]
    runs-on: shanoir-deploy
    env:
      DEPLOY_ID: ${{ inputs.DEPLOY_ID }}
    steps:
      - run: sh /run/github-runner/deploy-shanoir neurinfo

  deploy-ofsep:
    if: ${{ inputs.ofsep }}
    needs: [ build, post_build ]
    runs-on: shanoir-deploy
    env:
      DEPLOY_ID: ${{ inputs.DEPLOY_ID }}
    steps:
      - run: sh /run/github-runner/deploy-shanoir ofsep

  deploy-poc-neurinfo:
    if: ${{ inputs.poc-neurinfo }}
    needs: [ build, post_build ]
    runs-on: shanoir-deploy
    env:
      DEPLOY_ID: ${{ inputs.DEPLOY_ID }}
    steps:
      - run: sh /run/github-runner/deploy-shanoir poc-neurinfo
